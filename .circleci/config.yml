_machine_kwds: &machine_kwds
  image: circleci/classic:201710-02

_store_artifacts_kwds: &store_artifacts_kwds
  path: /home/circleci/work/tests

_test_environment: &test_environment
  WORKDIR: /home/circleci/work
  DOCKER_IMAGE: "nipype/nipype"

_set_pr_number: &set_pr_number
  name: Set PR number
  command: |
      echo 'export CIRCLE_PR_NUMBER="${CIRCLE_PR_NUMBER:-${CIRCLE_PULL_REQUEST##*/}}"' >> $BASH_ENV
      source $BASH_ENV
      echo $CIRCLE_PR_NUMBER

_generate_dockerfiles: &generate_dockerfiles
  name: Generate Dockerfiles
  command: |
    make gen-dockerfiles

_modify_nipype_version: &modify_nipype_version
  name: Modify Nipype version if necessary
  command: |
    if [ "$CIRCLE_TAG" != "" ]; then
      sed -i -E "s/(__version__ = )'[A-Za-z0-9.-]+'/\1'$CIRCLE_TAG'/" nipype/info.py
    fi

_get_base_image: &get_base_image
  name: Get base image (pull or build)
  no_output_timeout: 60m
  command: |
    source /tmp/docker/get_base_image.sh
    if [ "$GET_BASE" == "PULL" ]; then
      echo "Pulling base image ..."
      docker pull nipype/nipype:base
    elif [ "$GET_BASE" == "BUILD" ]; then
      e=1 && for i in {1..5}; do
        docker build -t nipype/nipype:base - < docker/Dockerfile.base  && e=0 && break || sleep 15
      done && [ "$e" -eq "0" ]
    else
      echo "Error: method to get base image not understood"
      exit 1
    fi

_build_main_image_py36: &build_main_image_py36
  name: Build main image (py36)
  no_output_timeout: 60m
  command: |
    e=1 && for i in {1..5}; do
      docker build \
        --rm=false \
        --tag nipype/nipype:latest \
        --tag nipype/nipype:py36 \
        --build-arg BUILD_DATE="$(date -u +"%Y-%m-%dT%H:%M:%SZ")" \
        --build-arg VCS_REF="$(git rev-parse --short HEAD)" \
        --build-arg VERSION="${CIRCLE_TAG}" /home/circleci/nipype \
      && e=0 && break || sleep 15
    done && [ "$e" -eq "0" ]

_build_main_image_py27: &build_main_image_py27
  name: Build main image (py27)
  no_output_timeout: 60m
  command: |
    e=1 && for i in {1..5}; do
      echo "Hello"
      && e=0 && break || sleep 15
    done && [ "$e" -eq "0" ]


version: 2
jobs:

  compare_base_dockerfiles:
    docker:
      - image: docker:17.10.0-ce-git
    steps:
      - checkout:
          path: /home/circleci/nipype
      - setup_remote_docker
      - run:
          name: Generate and prune base Dockerfile in preparation for cache check
          working_directory: /home/circleci/nipype/docker
          command: |
            mkdir -p /tmp/docker
            ash ./generate_dockerfiles.sh -b

            # Use the sha256 sum of the pruned Dockerfile as the cache key.
            ash prune_dockerfile.sh Dockerfile.base > /tmp/docker/Dockerfile.base-pruned
      - restore_cache:
          key: dockerfile-cache-v1-master-{{ checksum "/tmp/docker/Dockerfile.base-pruned" }}
      - run:
          name: Determine how to get base image
          command: |
            if [ -f /tmp/docker/cache/Dockerfile.base-pruned ]; then
              echo "Cache found. Will pull base image."
              echo 'export GET_BASE=PULL' > /tmp/docker/get_base_image.sh
            else
              echo "Cache not found. Will build base image."
              echo 'export GET_BASE=BUILD' > /tmp/docker/get_base_image.sh
            fi
      - persist_to_workspace:
          root: /tmp
          paths:
            - docker/Dockerfile.base-pruned
            - docker/get_base_image.sh

  test_pytest:
    machine: *machine_kwds
    working_directory: /home/circleci/nipype
    steps:
      - checkout:
          path: /home/circleci/nipype
      - attach_workspace:
          at: /tmp
      - run: *set_pr_number
      - run: *generate_dockerfiles
      - run: *modify_nipype_version
      - run: *get_base_image
      - run: *build_main_image_py36



workflows:
  version: 2
  build_test_deploy:
    jobs:
      - compare_base_dockerfiles
      - test_pytest:
          requires:
            - compare_base_dockerfiles

